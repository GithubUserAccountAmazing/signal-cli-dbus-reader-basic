#!/bin/bash

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#---------------------------------------------------------------------------

# basic template for setting up a signal-cli bot.
# Requires signal-cli: https://github.com/AsamK/signal-cli
# dedicated VM highly recommended :)

# Make sure you have started the daemon in your start up scripts using
# declare -r USERNAME="+xxxxxxxxxxx"
# signal-cli -u "$USERNAME" daemon &> "/dev/null" &

# Helpful signal-cli commands to use
# signal-cli --dbus sendReceipt -t "$1" --type read "$2"       
# signal-cli --dbus sendTyping "$2"                            
# signal-cli --dbus send -m "$3" "$2"	

# Define the important dbus substrings to search for
s="int64"
ms="string "
me="array ["
c="string \"contentType\""
f="string \"remoteId\""
v="variant"
l="string \"expiresInSeconds\""

# Define the interface and member for the Signal dbus signal
interface="org.asamk.Signal"
member="MessageReceivedV2"

# Take the signal message and print it in a formatted way
examineMsg() {

	# format message by adding 5 blank lines after newlines for better visibility
	local msg=$(sed 's/\\n/\\n     /g' <<<$3) 
	printf "TIME: %s\\nSENDER: %s\\nMSG: %b\\nCONTENT TYPE: %s\\nFILE NAME: %s\\n" \
	"$1" "$2" "$msg" "$4" "$5" # print the message information using placeholders
}

# Update the global variables that store the message information by
# searching for the dbus substrings defined above. Then manipulate the strings.
readMsg() {

	# use a case statement to check which line of dbus output is being read
	case $1 in

		# set TIMESTAMP by removing the first 6 characters of 'int64' string
  		0) t="${2:6}" ;;

		# set SENDER by removing everything before and after the quotes
		1) a="${2#*\"}" ; a="${a%\"*}" ;;

		2) case "$2" in

			# set first line of MSG by removing the first 8 characters of $2 and adding a newline
			"$ms"*) b="${2:8}\n" ;;

			# if not the begining of the MSG-decrement j to skip this line
			*) j=$((j-1)) ;; esac ;;

		# if needed, used to add multiple lines to MSG
		3) case "$2" in

			# if "array [" is found, remove everything after the last quote from MSG
			"$me"*) b="${b%\"*}" ;;
			
			# reset msgFlag once msg has completed 
			msgFlag=false

			# otherwise, append the line to MSG and decrement j until "array [" is found
			*) b+="$2\n" && j=$((j-1)) ;; esac ;;

		# if needed, set CONTENT TYPE
		4) case "$d $2" in

			# if contentType is found and d is false, set d to true and decrement j
			"false $c"*) d=true && j=$((j-1)) ;;

			# if variant is found and d is true, set e to the value between quotes
			"true $v"*) e="${2#*\"}" ; e="${e%\"*}" ;;

			# otherwise, decrement j
			*) j=$((j-1)) ;; esac ;;

		# if needed, set FILE NAME
		5) case "$g $2" in

			# if remoteId is found and g is false, set g to true and decrement j
			"false $f"*) g=true && j=$((j-1)) ;;

			# if variant is found and g is true, set h to the value between quotes
			"true $v"*) h="${2#*\"}" ; h="${h%\"*}" ;;

			# otherwise, decrement j
			*) j=$((j-1)) ;; esac ;;

	# if expiresInSeconds is found, call examineMsg with the global variables as arguments
	esac; [[ "$2" == "$l"* && "$msgFlag" == "false" ]] && examineMsg "$t" "$a" "$b" "$e" "$h"
}

# Clear the terminal screen and then run a dbus-monitor command that listens for
# new signal messages. Pipe the output to a while loop that reads each
# line of the dbus and pass it to the readMsg function.
clear; printf " --- cashtrack --- "
dbus-monitor --session "type='signal',interface='$intfc', member='$mmbr'" |
while read -r dbus; do

	# reset variables when new message starting with "int64" is received and
	# set msgFlag to true to avoid restarting on message body with 'int64'
	[[ "$dbus" == "$s"* && msgFlag == false ]] && { j=0; b=""; e=""; h=""; d=false; g=false; msgflag=true; }

	# call readMsg with j and the current dbus line as arguments
	readMsg $j "$dbus"
	((j++))
	
done






